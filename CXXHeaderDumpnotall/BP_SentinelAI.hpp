#ifndef UE4SS_SDK_BP_SentinelAI_HPP
#define UE4SS_SDK_BP_SentinelAI_HPP

class ABP_SentinelAI_C : public ASentinel
{
    FPointerToUberGraphFrame UberGraphFrame;
    class USpotLightComponent* LaserPointLight;
    class USceneComponent* LaserStart;
    class UNoisableComponent* noisable;
    class USphereComponent* ProximitySphereDetector;
    class UTalkableComponent* talkable;
    class UGridSnappingComponent* GridSnapping;
    class UCOMP_simpleLooper_C* COMP_simpleLooper patrol;
    class UCOMP_Voice_C* COMP_Voice;
    class UAudioComponent* TazerLoadingSound;
    class UCOMP_CameraTarget_C* COMP_CameraTarget;
    class UPointLightComponent* SelfIlluminationPointLight;
    class USpotLightComponent* VisionSpotLight;
    class UArrowComponent* Arrow1;
    class UStaticMeshComponent* SentinelMesh;
    FLinearColor TargetLightColor;
    class UMaterialInstanceDynamic* Dyn_Mat_SentinelLightColor;
    FLinearColor DefaultLightColor;
    float DefaultLightDistance;
    float InitialTargetLightDistance;
    float InitialTargetLightAngle;
    float DefaultLightAngle;
    bool bHearedSound;
    float HearedExpireTime;
    FVector HearedSoundLastLocation;
    FVector DefaultLightDirection;
    FVector TargetLightDirection;
    bool bIsForcingLightDirection;
    TEnumAsByte<ENUM_SentinelAI_State> CurrentState;
    FSmootherFloat TargetLightColorFloatSmoother;
    FSmootherFloat TargetLightDistanceSmoother;
    FSmootherFloat TargetLightAngleSmoother;
    FSmootherVector TargetLightDirectionSmoother;
    bool bTazerCanShoot;
    int32 TazerShootCount;
    class AActor* TazerTempTargetActor;
    float CurrentTazzerAimInnerRadius;
    float CurrentTazzerAimOutterRadius;
    FVector TempTazerTargetLocation;
    TArray<class AActor*> ActorsInDetectionZone;
    FSmootherFloat TazerLoadingSmoother;
    FSmootherFloat TazerPrecisionSmoother;
    float TazerCurrentLoadingValue;
    class UMaterialInterface* Sentinel_Mat;
    FRotator BeforeLookAtRelativeSpotlightRotation;
    FRotator InitialVisionSpotlightRelativeRotation;
    FSmootherFloat VisionSpotlightRotationFloatSmoother;
    FSmootherRotation EyeVisionRotationSmoother;
    TEnumAsByte<E_sfx_sentinel_state> sfx_state;
    bool LockedOnCat;
    class AActor* LockedOnThisActor;
    float BeamWidth;
    float BeamOpacity;
    FVector BeamTargetLocation;
    FVector BeamTraceTargetLocation;
    bool bLightLinkToTazer;
    float TazerPrecision;
    FVector TempTazerTargetVelocity;
    FVector CurrentTazzerTargetLocation;
    float Inner Radius;
    float CurrentTazerPrecision;
    bool bTazerTargetIsDead;
    float TazerDistanceRatio;
    FVector laserDirection;
    bool TazerHitTarget;
    float SpeedAccuracy;

    void ShootPrediction(FVector& ShootLocation);
    void Draw Debug();
    void ComputeTazerAccuracy(class AActor* Target Actor, float& InnerRadius, float& Accuracy, float& SpeedAccuracy);
    void TazerShoot(TSubclassOf<class AActor> ProjectileClass, FVector To Location, class AActor*& Projectile Actor);
    void HasHearedSound(bool& HasHearedSound);
    void ForceLightLookAtLocation(FVector Location, float Speed);
    void ForceLightDirection(FVector Direction, float Speed);
    void SetLightLookAtLocationInTime(FVector LookAtLocation, float Time);
    void SetLightDirectionUpdate();
    void SetLightDirectionInTime(float Time, FVector NewDirection);
    void SetLightAngleUpdate();
    void SetLightAngleInTime(float TargetLightAngle, float Time);
    void SetLightDistanceUpdate();
    void SetLightDistanceInTime(float TargetLightDistance, float Time);
    void UpdateLight();
    void SetLightColorUpdate();
    void SetLightColorInTime(FLinearColor NewLightColor, float Time);
    void UserConstructionScript();
    void Complete_6246EF4646E19036986D72BADCAEEDED();
    void Tick_6246EF4646E19036986D72BADCAEEDED(float Ratio);
    void ReceiveBeginPlay();
    void ReceiveTick(float DeltaSeconds);
    void TazzerBurst(TSubclassOf<class AActor> Projectile Class, FVector TargetLocation, class AActor* TargetActor);
    void Timer_Event_Shoot_Burst();
    void OnDisplayDebug(class UCanvas* _canvas);
    void TickTazer();
    void TickSphereDetector();
    void BndEvt__ProximitySphereDetector_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void BndEvt__ProximitySphereDetector_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
    void Tazer_Loading_Enter();
    void Tazer_Loading_Exit();
    void Tazer_Loading_Tick(float _dt);
    void Tazer_UnLoading_Tick(float _dt);
    void Tazer_UnLoading_Enter();
    void Tazer_UnLoading_Exit();
    void Tazer_Idle_Enter();
    void Tazer_ReadyToShoot_Enter();
    void Tazer_ReadyToShoot_Exit();
    void Tazer_Shooting_Enter();
    void Tazer_Shooting_Exit();
    void Tazer_Idle_Exit();
    void Event_GoToIdleAfterShooting();
    void Tazer_Reloading_Enter();
    void Event_Reloading_Finished();
    void Tazer_Reloading_Tick(float _dt);
    void Tazer_Reloading_Exit();
    void BndEvt__Noisable_K2Node_ComponentBoundEvent_3_NoiseDelegate__DelegateSignature(class UNoisableComponent* _noisableComponent, FVector _location, class AActor* _emitter);
    void SetVisionLightRelativeRotation(FRotator New Rotation);
    void ResetVisionSpotlight(float _time);
    void VisionLookAtWorldLocation(FVector World Location, float InterpSpeed);
    void _OnVisionLightDisabled();
    void _OnVisionLightEnabled();
    void BndEvt__Talkable_K2Node_ComponentBoundEvent_0_TalkableLineDelegate__DelegateSignature(class UTalkableComponent* _talkableComponent, const FDialogLine& _line);
    void BndEvt__Talkable_K2Node_ComponentBoundEvent_4_TalkableLineDelegate__DelegateSignature(class UTalkableComponent* _talkableComponent, const FDialogLine& _line);
    void BndEvt__COMP_Voice_K2Node_ComponentBoundEvent_5_Phrase Started Play__DelegateSignature();
    void BndEvt__COMP_Voice_K2Node_ComponentBoundEvent_6_Phrase Stoppped Play__DelegateSignature();
    void sfx_switch to state(TEnumAsByte<E_sfx_sentinel_state> State);
    void BndEvt__BP_SentinelAI_m_streamingComponent_K2Node_ComponentBoundEvent_7_StreamingComponentDelegate__DelegateSignature(class UStreamingComponent* _component);
    void BndEvt__BP_SentinelAI_m_streamingComponent_K2Node_ComponentBoundEvent_8_StreamingComponentDelegate__DelegateSignature(class UStreamingComponent* _component);
    void TickLightLinkToTazer();
    void OnSentinelActivityChanged_Event_0(bool status);
    void ExecuteUbergraph_BP_SentinelAI(int32 EntryPoint);
};

#endif
